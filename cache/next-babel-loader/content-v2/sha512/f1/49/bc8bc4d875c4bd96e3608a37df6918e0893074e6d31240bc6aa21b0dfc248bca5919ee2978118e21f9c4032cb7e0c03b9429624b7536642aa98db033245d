{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Badge, Col, Row } from 'reactstrap';\nimport { DateTime, Duration } from 'luxon';\nimport { EmptyRowCol } from '../common';\nimport ExperienceRow from './row';\nimport { PreProcessingComponent } from '../common/PreProcessingComponent';\nimport { Style } from '../common/Style';\nimport Util from '../common/Util';\nexport const Experience = {\n  Component: ({\n    payload\n  }) => {\n    return PreProcessingComponent({\n      payload,\n      component: Component\n    });\n  }\n};\n\nfunction Component({\n  payload\n}) {\n  const totalPeriod = () => {\n    if (payload.disableTotalPeriod) {\n      return '';\n    }\n\n    return /*#__PURE__*/_jsx(\"span\", {\n      style: {\n        fontSize: '50%'\n      },\n      children: /*#__PURE__*/_jsx(Badge, {\n        children: getFormattingExperienceTotalDuration(payload)\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"mt-5\",\n    children: /*#__PURE__*/_jsxs(EmptyRowCol, {\n      children: [/*#__PURE__*/_jsx(Row, {\n        className: \"pb-3\",\n        children: /*#__PURE__*/_jsx(Col, {\n          children: /*#__PURE__*/_jsxs(\"h2\", {\n            style: Style.blue,\n            children: [\"EXPERIENCE \", totalPeriod()]\n          })\n        })\n      }), payload.list.map((item, index) => /*#__PURE__*/_jsx(ExperienceRow, {\n        item: item,\n        index: index\n      }, index.toString()))]\n    })\n  });\n}\n\nfunction getFormattingExperienceTotalDuration(payload) {\n  const durations = payload.list.reduce((acc, item) => {\n    const itemDurations = item.positions.map(position => {\n      const endedAt = position.endedAt ? DateTime.fromFormat(position.endedAt, Util.LUXON_DATE_FORMAT.YYYY_LL) : DateTime.local();\n      const startedAt = DateTime.fromFormat(position.startedAt, Util.LUXON_DATE_FORMAT.YYYY_LL);\n      return endedAt.diff(startedAt);\n    });\n    return acc.concat(itemDurations); // 중첩된 배열 평탄화\n  }, []);\n  const totalExperience = durations.reduce((prev, cur) => prev.plus(cur), Duration.fromMillis(0));\n  return totalExperience.toFormat(`총 ${Util.LUXON_DATE_FORMAT.DURATION_KINDNESS}`);\n}","map":null,"metadata":{},"sourceType":"module"}