{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Badge, Col, Row } from 'reactstrap';\nimport React, { useEffect, useState } from 'react';\nimport { Style } from '../common/Style';\nimport Util from '../common/Util';\nexport default function SkillRow({\n  skill,\n  index\n}) {\n  const {\n    0: isMobileScreen,\n    1: setIsMobileScreen\n  } = useState(false);\n  useEffect(() => {\n    setIsMobileScreen(window.innerWidth < 768);\n\n    const handleResize = () => {\n      setIsMobileScreen(window.innerWidth < 768);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [index > 0 ? /*#__PURE__*/_jsx(\"hr\", {}) : '', /*#__PURE__*/_jsxs(Row, {\n      children: [/*#__PURE__*/_jsx(Col, {\n        sm: 12,\n        md: 3,\n        className: \"text-md-right\",\n        children: /*#__PURE__*/_jsx(\"h4\", {\n          style: Style.gray,\n          children: skill.category\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        sm: 12,\n        md: 9,\n        children: [createCalculatedSkillItems(skill.items, isMobileScreen), ' ']\n      })]\n    })]\n  });\n}\n\nfunction createCalculatedSkillItems(items, isVerticalScreen) {\n  const log = Util.debug('SkillRow:createCalculatedSkillItems');\n  /**\n   * @developer_commentary 단을 3단, 4단을 시도해봤지만 생각보다 이쁘게 나오지 않았고, 우선은 3단으로 한다. 만약 이쪽을 발전시킨다면 조금 더 이쁘고 능동적이게 데이터를 쪼갤 수 있는 방법을 찾으면 될 듯..\n   */\n\n  const layer = 3; // const splitPoint = layer % 2 ? Math.ceil(items.length / layer) : Math.floor(items.length / layer);\n\n  const splitPoint = Math.ceil(items.length / layer);\n  const list = [];\n\n  for (let i = 0, splitAfter = splitPoint; i < layer; i += 1, splitAfter += splitPoint) {\n    list.push(items.slice(splitAfter - splitPoint, i === layer - 1 ? undefined : splitAfter));\n  }\n\n  log('origin', items, items.length, splitPoint);\n  log('list', list);\n\n  if (isVerticalScreen) {\n    return /*#__PURE__*/_jsx(Row, {\n      className: \"mt-2 mt-md-0\",\n      children: /*#__PURE__*/_jsx(Col, {\n        xs: 12,\n        children: /*#__PURE__*/_jsx(\"ul\", {\n          children: items.map((skill, skillIndex) => {\n            return /*#__PURE__*/_jsxs(\"li\", {\n              children: [createBadge(skill.level), skill.title]\n            }, skillIndex.toString());\n          })\n        })\n      })\n    });\n  }\n\n  return /*#__PURE__*/_jsx(Row, {\n    className: \"mt-2 mt-md-0\",\n    children: list.map((skills, index) => {\n      return /*#__PURE__*/_jsx(Col, {\n        md: 4,\n        xs: 12,\n        children: /*#__PURE__*/_jsx(\"ul\", {\n          children: skills.map((skill, skillIndex) => {\n            return /*#__PURE__*/_jsxs(\"li\", {\n              children: [createBadge(skill.level), skill.title]\n            }, skillIndex.toString());\n          })\n        })\n      }, index.toString());\n    })\n  });\n}\n\nfunction createBadge(level) {\n  if (!level) {\n    return '';\n  }\n\n  const color = (() => {\n    switch (level) {\n      case 3:\n        {\n          return 'primary';\n        }\n\n      case 2:\n        {\n          return 'secondary';\n        }\n\n      case 1:\n      default:\n        {\n          return 'light';\n        }\n    }\n  })();\n\n  return /*#__PURE__*/_jsxs(\"span\", {\n    children: [/*#__PURE__*/_jsx(Badge, {\n      pill: true,\n      color: color,\n      children: level\n    }), ' ']\n  });\n}","map":null,"metadata":{},"sourceType":"module"}