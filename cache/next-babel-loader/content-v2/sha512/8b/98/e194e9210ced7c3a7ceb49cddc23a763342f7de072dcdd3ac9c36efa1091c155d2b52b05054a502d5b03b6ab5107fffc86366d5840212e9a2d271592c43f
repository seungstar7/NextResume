{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Badge, Col, Row } from 'reactstrap';\nimport { DateTime } from 'luxon';\nimport { Style } from '../common/Style';\nimport Util from '../common/Util';\nexport default function ExperienceRow({\n  item,\n  index\n}) {\n  const positionsWithDates = item.positions.map(position => _objectSpread(_objectSpread({}, position), {}, {\n    startedAtDate: DateTime.fromFormat(position.startedAt, Util.LUXON_DATE_FORMAT.YYYY_LL),\n    endedAtDate: position.endedAt ? DateTime.fromFormat(position.endedAt, Util.LUXON_DATE_FORMAT.YYYY_LL) : null,\n    isCurrent: !position.endedAt\n  }));\n  const sortedPositions = positionsWithDates.slice().sort((a, b) => b.startedAtDate.toMillis() - a.startedAtDate.toMillis());\n  const minStartedAt = DateTime.min(...sortedPositions.map(position => position.startedAtDate));\n  const isCurrentlyEmployed = sortedPositions.some(position => position.isCurrent);\n\n  function hasEndedAtDate(position) {\n    return position.endedAtDate !== null;\n  }\n\n  const endedAtDates = sortedPositions.filter(hasEndedAtDate).map(position => position.endedAtDate);\n  let maxEndedAt;\n\n  if (isCurrentlyEmployed) {\n    maxEndedAt = DateTime.local();\n  } else if (endedAtDates.length > 0) {\n    maxEndedAt = DateTime.max(...endedAtDates);\n  } else {\n    maxEndedAt = DateTime.local();\n  }\n\n  const periodTitle = createOverallWorkingPeriod(sortedPositions);\n  const hasMultiplePositions = sortedPositions.length > 1;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [index > 0 && /*#__PURE__*/_jsx(\"hr\", {}), /*#__PURE__*/_jsxs(Row, {\n      children: [/*#__PURE__*/_jsx(Col, {\n        sm: 12,\n        md: 3,\n        className: \"text-md-right\",\n        children: /*#__PURE__*/_jsx(\"h4\", {\n          style: Style.gray,\n          children: periodTitle\n        })\n      }), /*#__PURE__*/_jsx(Col, {\n        sm: 12,\n        md: 9,\n        children: /*#__PURE__*/_jsxs(\"h4\", {\n          style: {\n            display: 'inline-flex',\n            alignItems: 'center'\n          },\n          children: [item.title, ' ', /*#__PURE__*/_jsxs(\"span\", {\n            style: {\n              fontSize: '65%',\n              display: 'inline-flex',\n              alignItems: 'center'\n            },\n            children: [isCurrentlyEmployed && /*#__PURE__*/_jsx(Badge, {\n              color: \"primary\",\n              className: \"ml-1\",\n              children: \"\\uC7AC\\uC9C1 \\uC911\"\n            }), /*#__PURE__*/_jsx(Badge, {\n              color: \"info\",\n              className: \"ml-1\",\n              children: Util.getFormattingDuration(minStartedAt, maxEndedAt)\n            })]\n          })]\n        })\n      })]\n    }), sortedPositions.map((position, posIndex) => /*#__PURE__*/_jsxs(Row, {\n      className: \"mt-2\",\n      children: [/*#__PURE__*/_jsx(Col, {\n        sm: 12,\n        md: 3,\n        className: \"text-md-right\",\n        children: hasMultiplePositions && /*#__PURE__*/_jsx(\"span\", {\n          style: Style.gray,\n          children: createWorkingPeriod(position.startedAtDate, position.endedAtDate)\n        })\n      }), /*#__PURE__*/_jsxs(Col, {\n        sm: 12,\n        md: 9,\n        children: [/*#__PURE__*/_jsx(\"i\", {\n          style: Style.gray,\n          children: position.title\n        }), /*#__PURE__*/_jsxs(\"ul\", {\n          className: \"pt-2\",\n          children: [position.descriptions.map((description, descIndex) => /*#__PURE__*/_jsx(\"li\", {\n            children: description\n          }, descIndex.toString())), createSkillKeywords(position.skillKeywords)]\n        })]\n      })]\n    }, posIndex.toString()))]\n  });\n}\n\nfunction createOverallWorkingPeriod(positions) {\n  const DATE_FORMAT = Util.LUXON_DATE_FORMAT.YYYY_DOT_LL;\n  const startedAt = positions[positions.length - 1].startedAtDate;\n  const isCurrentlyEmployed = positions.some(position => position.isCurrent);\n\n  function hasEndedAtDate(position) {\n    return position.endedAtDate !== null;\n  }\n\n  const endedAtDates = positions.filter(hasEndedAtDate).map(position => position.endedAtDate);\n  let endedAt;\n\n  if (isCurrentlyEmployed) {\n    endedAt = DateTime.local();\n  } else if (endedAtDates.length > 0) {\n    endedAt = DateTime.max(...endedAtDates);\n  } else {\n    endedAt = DateTime.local();\n  }\n\n  return `${startedAt.toFormat(DATE_FORMAT)} ~ ${endedAt.toFormat(DATE_FORMAT)}`;\n}\n\nfunction createSkillKeywords(skillKeywords) {\n  if (!skillKeywords) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxs(\"li\", {\n    children: [/*#__PURE__*/_jsx(\"strong\", {\n      children: \"Skill Keywords\"\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: skillKeywords.map((keyword, index) => /*#__PURE__*/_jsx(Badge, {\n        style: Style.skillKeywordBadge,\n        color: \"secondary\",\n        className: \"mr-1\",\n        children: keyword\n      }, index.toString()))\n    })]\n  });\n}\n\nfunction createWorkingPeriod(startedAt, endedAt) {\n  const DATE_FORMAT = Util.LUXON_DATE_FORMAT.YYYY_DOT_LL;\n\n  if (!endedAt) {\n    return `${startedAt.toFormat(DATE_FORMAT)} ~`;\n  }\n\n  return `${startedAt.toFormat(DATE_FORMAT)} ~ ${endedAt.toFormat(DATE_FORMAT)}`;\n}","map":null,"metadata":{},"sourceType":"module"}